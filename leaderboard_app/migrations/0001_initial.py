# Generated by Django 5.1.1 on 2024-09-11 01:17

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Organisation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('category', models.CharField(db_index=True, max_length=50)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('organisation', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activities', to='leaderboard_app.organisation')),
            ],
        ),
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('max_participants', models.IntegerField(default=100, validators=[django.core.validators.MinValueValidator(2)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tournaments', to='leaderboard_app.activity')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('total_score', models.BigIntegerField(db_index=True, default=0)),
                ('level', models.IntegerField(db_index=True, default=1)),
                ('experience_points', models.BigIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('groups', models.ManyToManyField(related_name='leaderboard_user_set', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='leaderboard_user_set', to='auth.permission')),
            ],
            options={
                'ordering': ['-total_score'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='TournamentParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('score', models.BigIntegerField(default=0)),
                ('rank', models.IntegerField(blank=True, db_index=True, null=True)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leaderboard_app.tournament')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leaderboard_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True)),
                ('avatar', models.ImageField(blank=True, upload_to='avatars/')),
                ('country', models.CharField(blank=True, max_length=100)),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to='leaderboard_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(db_index=True, default=False)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to='leaderboard_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='LeaderboardEntry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.IntegerField(default=0)),
                ('rank', models.IntegerField(blank=True, db_index=True, null=True)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='leaderboard_app.activity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='leaderboard_entries', to='leaderboard_app.user')),
            ],
            options={
                'ordering': ['rank'],
            },
        ),
        migrations.CreateModel(
            name='Friendship',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('friend', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friends', to='leaderboard_app.user')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='friendships', to='leaderboard_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('accepted', 'Accepted'), ('rejected', 'Rejected')], db_index=True, default='pending', max_length=10)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_requests', to='leaderboard_app.user')),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sent_requests', to='leaderboard_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='ActivitySession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField(auto_now_add=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('score', models.BigIntegerField(default=0)),
                ('experience_gained', models.IntegerField(default=0, validators=[django.core.validators.MinValueValidator(0)])),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leaderboard_app.activity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='leaderboard_app.user')),
            ],
        ),
        migrations.CreateModel(
            name='UserGameStats',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('high_score', models.BigIntegerField(default=0)),
                ('total_score', models.BigIntegerField(default=0)),
                ('games_played', models.IntegerField(default=0)),
                ('current_streak', models.IntegerField(default=0)),
                ('best_streak', models.IntegerField(default=0)),
                ('total_playtime', models.DurationField(default=datetime.timedelta(0))),
                ('last_played', models.DateTimeField(blank=True, null=True)),
                ('activity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to='leaderboard_app.activity')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_stats', to='leaderboard_app.user')),
            ],
        ),
        migrations.AddIndex(
            model_name='activity',
            index=models.Index(fields=['category'], name='leaderboard_categor_acf313_idx'),
        ),
        migrations.AddIndex(
            model_name='tournament',
            index=models.Index(fields=['start_date', 'end_date'], name='leaderboard_start_d_e17a59_idx'),
        ),
        migrations.AddIndex(
            model_name='user',
            index=models.Index(fields=['total_score', 'level'], name='leaderboard_total_s_f2cf9d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='tournamentparticipant',
            unique_together={('user', 'tournament')},
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['-created_at'], name='leaderboard_created_40adcc_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='leaderboardentry',
            unique_together={('activity', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='friendship',
            unique_together={('user', 'friend')},
        ),
        migrations.AlterUniqueTogether(
            name='friendrequest',
            unique_together={('sender', 'recipient')},
        ),
        migrations.AlterUniqueTogether(
            name='activitysession',
            unique_together={('user', 'activity', 'start_time')},
        ),
        migrations.AlterUniqueTogether(
            name='usergamestats',
            unique_together={('user', 'activity')},
        ),
    ]
